# Generated by Django 5.0.4 on 2024-04-17 22:13

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import mptt.fields
import simple_history.models
import warehouse.inventory.managers
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('is_approved', models.BooleanField(default=False, verbose_name='Is Approved')),
                ('role', models.CharField(choices=[('DEFAULT_USER', 'Default User'), ('SECURITY', 'Security'), ('RECEPTIONIST', 'Receptionist'), ('WAREHOUSE_OPERATIVE', 'Warehouse Operative'), ('WAREHOUSE_ADMIN', 'Warehouse Admin'), ('WAREHOUSE_TEAM_LEADER', 'Warehouse Team Leader'), ('WAREHOUSE_MANAGER', 'Warehouse Manager'), ('INVENTORY_ADMIN', 'Inventory Admin'), ('INVENTORY_TEAM_LEADER', 'Inventory Team Leader'), ('INVENTORY_MANAGER', 'Inventory Manager'), ('OPERATIONAL_MANAGER', 'Operational Manager')], default='DEFAULT_USER', max_length=50, verbose_name='Role')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', warehouse.inventory.managers.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Aisle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('aisle_letter', models.CharField(help_text='Aisle identifier (letters only).', max_length=5, validators=[django.core.validators.RegexValidator('^[A-Za-z]+$', 'Only letters are allowed for aisle letters.')], verbose_name='Aisle Letter')),
            ],
            options={
                'verbose_name': 'Aisle',
                'verbose_name_plural': 'Aisles',
            },
        ),
        migrations.CreateModel(
            name='GatehouseBooking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('driver_name', models.CharField(max_length=255)),
                ('company', models.CharField(max_length=255)),
                ('vehicle_registration', models.CharField(max_length=50)),
                ('trailer_number', models.CharField(max_length=50, verbose_name='Trailer Number')),
                ('arrival_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('paperwork', models.FileField(upload_to='gatehouse_paperwork/')),
            ],
        ),
        migrations.CreateModel(
            name='Level',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.CharField(choices=[('G', 'Ground Floor'), ('1', 'Level 1'), ('2', 'Level 2'), ('3', 'Level 3'), ('4', 'Level 4')], default='G', help_text='Specifies the level within the rack.', max_length=1)),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='Unique code for identifying the location.', max_length=50, unique=True, verbose_name='Location Code')),
                ('description', models.TextField(blank=True, help_text='Description of the location.', verbose_name='Description')),
                ('side', models.CharField(choices=[('E', 'East'), ('W', 'West'), ('N', 'North'), ('S', 'South')], help_text='Side of the location', max_length=1)),
                ('location_number', models.IntegerField()),
                ('weight', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('type', models.CharField(choices=[('PND', 'PND'), ('Storage', 'Storage'), ('Pick Face', 'Pick Face'), ('Inbound Floor', 'Inbound Floor'), ('Outbound Floor', 'Outbound Floor')], default='Storage', max_length=15)),
                ('status', models.CharField(choices=[('empty', 'Empty'), ('full', 'Full'), ('vor', 'Verification Required'), ('urgent_pick', 'Urgent Picking Required'), ('urgent_replenish', 'Urgent Replenishment Required'), ('low_stock', 'Low Stock')], default='empty', max_length=20)),
                ('name', models.CharField(blank=True, max_length=255)),
                ('level', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='locations', to='inventory.level')),
            ],
            options={
                'ordering': ['level', 'side', 'location_number'],
                'unique_together': {('level', 'side', 'location_number')},
            },
        ),
        migrations.CreateModel(
            name='PredictionModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('model_file', models.FileField(upload_to='models/')),
            ],
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('report_type', models.CharField(choices=[('inventory', 'Inventory Report'), ('order', 'Order Report'), ('supplier', 'Supplier Report'), ('shipment', 'Shipment Report'), ('activity', 'User Activity Report'), ('maximums', 'Max Values Report')], max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Report',
                'verbose_name_plural': 'Reports',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('first_name', models.CharField(max_length=255, verbose_name='First Name')),
                ('last_name', models.CharField(max_length=255, verbose_name='Last Name')),
                ('dob', models.DateField(verbose_name='Date of Birth')),
                ('personal_email', models.EmailField(max_length=254, unique=True, verbose_name='Personal Email')),
                ('contact_number', models.CharField(max_length=20, verbose_name='Contact Number')),
                ('address', models.TextField(verbose_name='Address')),
                ('position', models.CharField(max_length=100, verbose_name='Position')),
                ('start_date', models.DateField(verbose_name='Start Date')),
            ],
            options={
                'verbose_name': 'Employee',
                'verbose_name_plural': 'Employees',
                'db_table': 'employee',
            },
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('street_number', models.CharField(max_length=128)),
                ('street_name', models.CharField(max_length=255)),
                ('city', models.CharField(max_length=255)),
                ('county', models.CharField(max_length=255)),
                ('country', models.CharField(max_length=255)),
                ('post_code', models.CharField(max_length=20, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'unique_together': {('street_number', 'post_code')},
            },
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField(verbose_name='Object ID')),
                ('action', models.CharField(choices=[('Start', 'Task Started'), ('Complete', 'Task Completed'), ('Interrupt', 'Task Interrupted'), ('Update', 'Status Updated'), ('Manual', 'Manual Change')], max_length=50, verbose_name='Action')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Timestamp')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype', verbose_name='Content Type')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Audit Log',
                'verbose_name_plural': 'Audit Logs',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='format: required, max-100', max_length=100, verbose_name='category name')),
                ('slug', models.SlugField(help_text='format: required, letters, numbers, underscore, or hyphens', max_length=150, unique=True, verbose_name='category safe URL')),
                ('is_active', models.BooleanField(default=True)),
                ('weight_limit', models.DecimalField(blank=True, decimal_places=2, help_text='Maximum weight limit for this category in kilograms.', max_digits=5, null=True, verbose_name='weight limit')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, help_text='format: not required', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='children', to='inventory.category', verbose_name='parent category')),
            ],
            options={
                'verbose_name': 'product category',
                'verbose_name_plural': 'product categories',
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Customer Name')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Customer Email')),
                ('phone', models.CharField(blank=True, max_length=20, verbose_name='Contact Phone')),
                ('address', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='customer', to='inventory.address', verbose_name='Address')),
            ],
        ),
        migrations.CreateModel(
            name='Dispatch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dispatch_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Dispatch Time')),
                ('driver_name', models.CharField(max_length=255, verbose_name='Driver Name')),
                ('vehicle_registration', models.CharField(max_length=255, verbose_name='Vehicle Registration')),
                ('trailer_number', models.CharField(max_length=255, verbose_name='Trailer Number')),
                ('dispatched_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Dispatched By')),
            ],
        ),
        migrations.CreateModel(
            name='CMR',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('document', models.FileField(upload_to='cmr_documents/', verbose_name='CMR Document')),
                ('confirmed_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Confirmed By')),
                ('dispatch', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='cmr', to='inventory.dispatch')),
            ],
        ),
        migrations.CreateModel(
            name='FinalBayAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('final_bay', models.CharField(max_length=50)),
                ('confirmed_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_loaded', models.BooleanField(default=False, verbose_name='Loading Confirmed')),
                ('loaded_at', models.DateTimeField(blank=True, null=True, verbose_name='Loaded At')),
                ('confirmed_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('loader', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='loaded_bays', to=settings.AUTH_USER_MODEL, verbose_name='Loader')),
            ],
        ),
        migrations.AddField(
            model_name='dispatch',
            name='final_bay_assignment',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='inventory.finalbayassignment', verbose_name='Final Bay Assignment'),
        ),
        migrations.CreateModel(
            name='FoodProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sku', models.CharField(max_length=100, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('quantity', models.IntegerField()),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=8)),
                ('is_high_demand', models.BooleanField(default=False, help_text='Indicates if the product is in high demand')),
                ('batch_number', models.CharField(max_length=100)),
                ('storage_temperature', models.CharField(max_length=50)),
                ('date_received', models.DateField()),
                ('expiration_date', models.DateField()),
                ('supplier', models.CharField(max_length=255)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('stock', models.IntegerField(default=0)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to='inventory.category')),
                ('last_updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='product_updates', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['expiration_date'],
            },
        ),
        migrations.CreateModel(
            name='HistoricalAddress',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('street_number', models.CharField(max_length=128)),
                ('street_name', models.CharField(max_length=255)),
                ('city', models.CharField(max_length=255)),
                ('county', models.CharField(max_length=255)),
                ('country', models.CharField(max_length=255)),
                ('post_code', models.CharField(db_index=True, max_length=20)),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical address',
                'verbose_name_plural': 'historical addresss',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalAuditLog',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField(verbose_name='Object ID')),
                ('action', models.CharField(choices=[('Start', 'Task Started'), ('Complete', 'Task Completed'), ('Interrupt', 'Task Interrupted'), ('Update', 'Status Updated'), ('Manual', 'Manual Change')], max_length=50, verbose_name='Action')),
                ('timestamp', models.DateTimeField(blank=True, editable=False, verbose_name='Timestamp')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('content_type', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='contenttypes.contenttype', verbose_name='Content Type')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'historical Audit Log',
                'verbose_name_plural': 'historical Audit Logs',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalCMR',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('document', models.TextField(max_length=100, verbose_name='CMR Document')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('confirmed_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Confirmed By')),
                ('dispatch', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.dispatch')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical cmr',
                'verbose_name_plural': 'historical cmrs',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalCustomer',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Customer Name')),
                ('email', models.EmailField(db_index=True, max_length=254, verbose_name='Customer Email')),
                ('phone', models.CharField(blank=True, max_length=20, verbose_name='Contact Phone')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('address', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.address', verbose_name='Address')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical customer',
                'verbose_name_plural': 'historical customers',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalFoodProduct',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('sku', models.CharField(db_index=True, max_length=100)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('quantity', models.IntegerField()),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=8)),
                ('is_high_demand', models.BooleanField(default=False, help_text='Indicates if the product is in high demand')),
                ('batch_number', models.CharField(max_length=100)),
                ('storage_temperature', models.CharField(max_length=50)),
                ('date_received', models.DateField()),
                ('expiration_date', models.DateField()),
                ('supplier', models.CharField(max_length=255)),
                ('updated_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('stock', models.IntegerField(default=0)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('category', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.category')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('last_updated_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical food product',
                'verbose_name_plural': 'historical food products',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalGatehouseBooking',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('driver_name', models.CharField(max_length=255)),
                ('company', models.CharField(max_length=255)),
                ('vehicle_registration', models.CharField(max_length=50)),
                ('trailer_number', models.CharField(max_length=50, verbose_name='Trailer Number')),
                ('arrival_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('paperwork', models.TextField(max_length=100)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical gatehouse booking',
                'verbose_name_plural': 'historical gatehouse bookings',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalInbound',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(verbose_name='quantity received')),
                ('receiving_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='receiving date')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='additional notes')),
                ('status', models.CharField(choices=[('Pending', 'Pending Release'), ('Received', 'Received'), ('Released', 'Released for Putaway'), ('Stored', 'Stored')], default='Pending', max_length=20, verbose_name='Status')),
                ('floor_location', models.CharField(help_text='Location on the warehouse floor where the stock is placed', max_length=100, verbose_name='Floor Location')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('final_bay_assignment', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.finalbayassignment')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('product', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.foodproduct')),
                ('received_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='received by')),
            ],
            options={
                'verbose_name': 'historical Inbound Record',
                'verbose_name_plural': 'historical Inbound Records',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalOrder',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('order_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Order Date')),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Processing', 'Processing'), ('Shipped', 'Shipped'), ('Cancelled', 'Cancelled')], default='Pending', max_length=20, verbose_name='Status')),
                ('total_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Total Amount')),
                ('is_paid', models.BooleanField(default=False, verbose_name='Is Paid')),
                ('payment_date', models.DateTimeField(blank=True, null=True, verbose_name='Payment Date')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Additional Notes')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('customer', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.customer', verbose_name='Customer')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Order',
                'verbose_name_plural': 'historical Orders',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalProvisionalBayAssignment',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('provisional_bay', models.CharField(max_length=50)),
                ('assigned_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('assigned_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('gatehouse_booking', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.gatehousebooking')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical provisional bay assignment',
                'verbose_name_plural': 'historical provisional bay assignments',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalRack',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('rack_number', models.CharField(max_length=50, verbose_name='Rack Number')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('aisle', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.aisle', verbose_name='Aisle')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical rack',
                'verbose_name_plural': 'historical racks',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalReplenishmentRequest',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('required_quantity', models.PositiveIntegerField()),
                ('status', models.CharField(choices=[('Requested', 'Requested'), ('Fulfilling', 'Fulfilling'), ('Completed', 'Completed')], default='Requested', max_length=20)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('product', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.foodproduct')),
            ],
            options={
                'verbose_name': 'historical replenishment request',
                'verbose_name_plural': 'historical replenishment requests',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalShipment',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('shipment_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Shipment Time')),
                ('tracking_number', models.CharField(blank=True, max_length=255, null=True, verbose_name='Tracking Number')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('dispatch', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.dispatch')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('shipped_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Shipped By')),
            ],
            options={
                'verbose_name': 'historical shipment',
                'verbose_name_plural': 'historical shipments',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSupplier',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='supplier name')),
                ('contact', models.CharField(max_length=255, verbose_name='supplier contact')),
                ('email', models.EmailField(max_length=254, verbose_name='supplier email')),
                ('contact_number', models.CharField(max_length=50, verbose_name='supplier contact number')),
                ('created_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('updated_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('address', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.address', verbose_name='address')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical supplier',
                'verbose_name_plural': 'historical suppliers',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalZone',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('category', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.category')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical zone',
                'verbose_name_plural': 'historical zones',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='Inbound',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(verbose_name='quantity received')),
                ('receiving_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='receiving date')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='additional notes')),
                ('status', models.CharField(choices=[('Pending', 'Pending Release'), ('Received', 'Received'), ('Released', 'Released for Putaway'), ('Stored', 'Stored')], default='Pending', max_length=20, verbose_name='Status')),
                ('floor_location', models.CharField(help_text='Location on the warehouse floor where the stock is placed', max_length=100, verbose_name='Floor Location')),
                ('final_bay_assignment', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='inbounds', to='inventory.finalbayassignment')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inbounds', to='inventory.foodproduct')),
                ('received_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='inbound_receivings', to=settings.AUTH_USER_MODEL, verbose_name='received by')),
            ],
            options={
                'verbose_name': 'Inbound Record',
                'verbose_name_plural': 'Inbound Records',
                'ordering': ['-receiving_date'],
            },
        ),
        migrations.CreateModel(
            name='HistoricalPNDLocation',
            fields=[
                ('location_ptr', models.ForeignKey(auto_created=True, blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, parent_link=True, related_name='+', to='inventory.location')),
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('code', models.CharField(db_index=True, help_text='Unique code for identifying the location.', max_length=50, verbose_name='Location Code')),
                ('description', models.TextField(blank=True, help_text='Description of the location.', verbose_name='Description')),
                ('side', models.CharField(choices=[('E', 'East'), ('W', 'West'), ('N', 'North'), ('S', 'South')], help_text='Side of the location', max_length=1)),
                ('location_number', models.IntegerField()),
                ('weight', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('type', models.CharField(choices=[('PND', 'PND'), ('Storage', 'Storage'), ('Pick Face', 'Pick Face'), ('Inbound Floor', 'Inbound Floor'), ('Outbound Floor', 'Outbound Floor')], default='Storage', max_length=15)),
                ('status', models.CharField(choices=[('empty', 'Empty'), ('full', 'Full'), ('vor', 'Verification Required'), ('urgent_pick', 'Urgent Picking Required'), ('urgent_replenish', 'Urgent Replenishment Required'), ('low_stock', 'Low Stock')], default='empty', max_length=20)),
                ('name', models.CharField(blank=True, max_length=255)),
                ('temperature_range', models.CharField(blank=True, default='default-range', help_text="Suitable temperature range for this location, e.g., '0-4°C' for chilled.", max_length=50, null=True, verbose_name='Temperature Range')),
                ('capacity', models.PositiveIntegerField(blank=True, help_text='Maximum capacity of the location. Useful for space management.', null=True, verbose_name='Capacity')),
                ('restrictions', models.TextField(blank=True, help_text="Any specific restrictions for this location, such as 'No flammable products'.", null=True, verbose_name='Restrictions')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('level', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.level')),
            ],
            options={
                'verbose_name': 'historical pnd location',
                'verbose_name_plural': 'historical pnd locations',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalOutbound',
            fields=[
                ('location_ptr', models.ForeignKey(auto_created=True, blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, parent_link=True, related_name='+', to='inventory.location')),
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('code', models.CharField(db_index=True, help_text='Unique code for identifying the location.', max_length=50, verbose_name='Location Code')),
                ('description', models.TextField(blank=True, help_text='Description of the location.', verbose_name='Description')),
                ('side', models.CharField(choices=[('E', 'East'), ('W', 'West'), ('N', 'North'), ('S', 'South')], help_text='Side of the location', max_length=1)),
                ('location_number', models.IntegerField()),
                ('weight', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('type', models.CharField(choices=[('PND', 'PND'), ('Storage', 'Storage'), ('Pick Face', 'Pick Face'), ('Inbound Floor', 'Inbound Floor'), ('Outbound Floor', 'Outbound Floor')], default='Storage', max_length=15)),
                ('status', models.CharField(choices=[('empty', 'Empty'), ('full', 'Full'), ('vor', 'Verification Required'), ('urgent_pick', 'Urgent Picking Required'), ('urgent_replenish', 'Urgent Replenishment Required'), ('low_stock', 'Low Stock')], default='empty', max_length=20)),
                ('name', models.CharField(blank=True, max_length=255)),
                ('address', models.CharField(max_length=255, null=True)),
                ('floor_number', models.PositiveIntegerField()),
                ('bay_number', models.PositiveIntegerField()),
                ('additional_info', models.TextField()),
                ('location_identifier', models.CharField(max_length=100)),
                ('max_capacity', models.IntegerField()),
                ('operational_restrictions', models.CharField(max_length=255)),
                ('special_handling_required', models.BooleanField(default=False)),
                ('outbound_code', models.CharField(db_index=True, max_length=50, verbose_name='Outbound Code')),
                ('utilized_capacity', models.PositiveIntegerField(default=0, verbose_name='Utilized Capacity')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('managing_user', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Managing User')),
                ('level', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.level')),
            ],
            options={
                'verbose_name': 'historical outbound',
                'verbose_name_plural': 'historical outbounds',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalLocation',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('code', models.CharField(db_index=True, help_text='Unique code for identifying the location.', max_length=50, verbose_name='Location Code')),
                ('description', models.TextField(blank=True, help_text='Description of the location.', verbose_name='Description')),
                ('side', models.CharField(choices=[('E', 'East'), ('W', 'West'), ('N', 'North'), ('S', 'South')], help_text='Side of the location', max_length=1)),
                ('location_number', models.IntegerField()),
                ('weight', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('type', models.CharField(choices=[('PND', 'PND'), ('Storage', 'Storage'), ('Pick Face', 'Pick Face'), ('Inbound Floor', 'Inbound Floor'), ('Outbound Floor', 'Outbound Floor')], default='Storage', max_length=15)),
                ('status', models.CharField(choices=[('empty', 'Empty'), ('full', 'Full'), ('vor', 'Verification Required'), ('urgent_pick', 'Urgent Picking Required'), ('urgent_replenish', 'Urgent Replenishment Required'), ('low_stock', 'Low Stock')], default='empty', max_length=20)),
                ('name', models.CharField(blank=True, max_length=255)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('level', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.level')),
            ],
            options={
                'verbose_name': 'historical location',
                'verbose_name_plural': 'historical locations',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='PNDLocation',
            fields=[
                ('location_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='inventory.location')),
                ('temperature_range', models.CharField(blank=True, default='default-range', help_text="Suitable temperature range for this location, e.g., '0-4°C' for chilled.", max_length=50, null=True, verbose_name='Temperature Range')),
                ('capacity', models.PositiveIntegerField(blank=True, help_text='Maximum capacity of the location. Useful for space management.', null=True, verbose_name='Capacity')),
                ('restrictions', models.TextField(blank=True, help_text="Any specific restrictions for this location, such as 'No flammable products'.", null=True, verbose_name='Restrictions')),
            ],
            bases=('inventory.location',),
        ),
        migrations.CreateModel(
            name='LoaderTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(verbose_name='Quantity')),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('In Progress', 'In Progress'), ('Completed', 'Completed')], default='Pending', max_length=20, verbose_name='Status')),
                ('completion_time', models.DateTimeField(blank=True, null=True, verbose_name='Completion Time')),
                ('confirmed_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Confirmed By')),
                ('dispatch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='loader_tasks', to='inventory.dispatch')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.foodproduct', verbose_name='Product')),
                ('source_location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.location', verbose_name='Source Location')),
            ],
        ),
        migrations.CreateModel(
            name='HistoricalVNATask',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('task_type', models.CharField(choices=[('Putaway', 'Putaway from PND to Storage'), ('Order Picking', 'Order Picking from Storage to PND'), ('Replenishment Picking', 'Replenishment Picking from Storage to PND')], default='Putaway', help_text='Type of VNA task.', max_length=30)),
                ('quantity', models.PositiveIntegerField(verbose_name='Quantity')),
                ('vna_equipment', models.CharField(help_text='The VNA equipment used for this task.', max_length=255, verbose_name='VNA Equipment')),
                ('status', models.CharField(choices=[('Assigned', 'Assigned'), ('In Progress', 'In Progress'), ('Completed', 'Completed')], default='Assigned', max_length=20, verbose_name='Status')),
                ('start_time', models.DateTimeField(blank=True, editable=False, verbose_name='Start Time')),
                ('completion_time', models.DateTimeField(blank=True, null=True, verbose_name='Completion Time')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('product', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.foodproduct', verbose_name='Product')),
                ('destination_location', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.location', verbose_name='Destination Location')),
                ('source_location', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.location', verbose_name='Source Location')),
            ],
            options={
                'verbose_name': 'historical VNATask',
                'verbose_name_plural': 'historical VNATasks',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalReplenishmentTask',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(help_text='Quantity to be replenished.')),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('In Progress', 'In Progress'), ('Completed', 'Completed')], default='Pending', max_length=20)),
                ('priority', models.IntegerField(default=0, help_text='Priority of the task, with higher numbers indicating higher priority.')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('assigned_to', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('product', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.foodproduct')),
                ('destination_location', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.location')),
                ('source_location', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.location')),
            ],
            options={
                'verbose_name': 'historical replenishment task',
                'verbose_name_plural': 'historical replenishment tasks',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalProductLocation',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=0, help_text='Quantity of the product at the location.')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('product', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.foodproduct')),
                ('location', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.location')),
            ],
            options={
                'verbose_name': 'historical Product Location',
                'verbose_name_plural': 'historical Product Locations',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalLoaderTask',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(verbose_name='Quantity')),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('In Progress', 'In Progress'), ('Completed', 'Completed')], default='Pending', max_length=20, verbose_name='Status')),
                ('completion_time', models.DateTimeField(blank=True, null=True, verbose_name='Completion Time')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('confirmed_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Confirmed By')),
                ('dispatch', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.dispatch')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('product', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.foodproduct', verbose_name='Product')),
                ('source_location', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.location', verbose_name='Source Location')),
            ],
            options={
                'verbose_name': 'historical loader task',
                'verbose_name_plural': 'historical loader tasks',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Order Date')),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Processing', 'Processing'), ('Shipped', 'Shipped'), ('Cancelled', 'Cancelled')], default='Pending', max_length=20, verbose_name='Status')),
                ('total_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Total Amount')),
                ('is_paid', models.BooleanField(default=False, verbose_name='Is Paid')),
                ('payment_date', models.DateTimeField(blank=True, null=True, verbose_name='Payment Date')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Additional Notes')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='inventory.customer', verbose_name='Customer')),
            ],
            options={
                'verbose_name': 'Order',
                'verbose_name_plural': 'Orders',
                'ordering': ['-order_date'],
            },
        ),
        migrations.CreateModel(
            name='HistoricalOrderItem',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(verbose_name='Quantity')),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=8, verbose_name='Unit Price')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('product', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.foodproduct', verbose_name='Product')),
                ('order', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.order', verbose_name='Order')),
            ],
            options={
                'verbose_name': 'historical Order Item',
                'verbose_name_plural': 'historical Order Items',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalDispatch',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('dispatch_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Dispatch Time')),
                ('driver_name', models.CharField(max_length=255, verbose_name='Driver Name')),
                ('vehicle_registration', models.CharField(max_length=255, verbose_name='Vehicle Registration')),
                ('trailer_number', models.CharField(max_length=255, verbose_name='Trailer Number')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('dispatched_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Dispatched By')),
                ('final_bay_assignment', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.finalbayassignment', verbose_name='Final Bay Assignment')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('order', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.order')),
            ],
            options={
                'verbose_name': 'historical dispatch',
                'verbose_name_plural': 'historical dispatchs',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AddField(
            model_name='dispatch',
            name='order',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='dispatch', to='inventory.order'),
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(verbose_name='Quantity')),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=8, verbose_name='Unit Price')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='inventory.order', verbose_name='Order')),
                ('product', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='order_items', to='inventory.foodproduct', verbose_name='Product')),
            ],
            options={
                'verbose_name': 'Order Item',
                'verbose_name_plural': 'Order Items',
            },
        ),
        migrations.CreateModel(
            name='ProvisionalBayAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('provisional_bay', models.CharField(max_length=50)),
                ('assigned_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('assigned_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('gatehouse_booking', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='inventory.gatehousebooking')),
            ],
        ),
        migrations.CreateModel(
            name='HistoricalFinalBayAssignment',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('final_bay', models.CharField(max_length=50)),
                ('confirmed_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_loaded', models.BooleanField(default=False, verbose_name='Loading Confirmed')),
                ('loaded_at', models.DateTimeField(blank=True, null=True, verbose_name='Loaded At')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('confirmed_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('loader', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Loader')),
                ('provisional_bay_assignment', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.provisionalbayassignment')),
            ],
            options={
                'verbose_name': 'historical final bay assignment',
                'verbose_name_plural': 'historical final bay assignments',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AddField(
            model_name='finalbayassignment',
            name='provisional_bay_assignment',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='inventory.provisionalbayassignment'),
        ),
        migrations.CreateModel(
            name='Rack',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rack_number', models.CharField(max_length=50, verbose_name='Rack Number')),
                ('aisle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='racks', to='inventory.aisle', verbose_name='Aisle')),
            ],
        ),
        migrations.AddField(
            model_name='level',
            name='rack',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='levels', to='inventory.rack'),
        ),
        migrations.CreateModel(
            name='ReplenishmentRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('required_quantity', models.PositiveIntegerField()),
                ('status', models.CharField(choices=[('Requested', 'Requested'), ('Fulfilling', 'Fulfilling'), ('Completed', 'Completed')], default='Requested', max_length=20)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.foodproduct')),
            ],
        ),
        migrations.CreateModel(
            name='ReplenishmentTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(help_text='Quantity to be replenished.')),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('In Progress', 'In Progress'), ('Completed', 'Completed')], default='Pending', max_length=20)),
                ('priority', models.IntegerField(default=0, help_text='Priority of the task, with higher numbers indicating higher priority.')),
                ('assigned_to', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='replenishment_tasks', to=settings.AUTH_USER_MODEL)),
                ('destination_location', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replenishment_destinations', to='inventory.location')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='replenishment_tasks', to='inventory.foodproduct')),
                ('source_location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='replenishment_sources', to='inventory.location')),
            ],
        ),
        migrations.CreateModel(
            name='Sensor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sensor_type', models.CharField(max_length=50, verbose_name='Sensor Type')),
                ('status', models.CharField(choices=[('Active', 'Active'), ('Inactive', 'Inactive')], default='Active', max_length=20)),
                ('last_checked', models.DateTimeField(auto_now=True, verbose_name='Last Checked')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sensors', to='inventory.location')),
            ],
        ),
        migrations.CreateModel(
            name='SensorData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.JSONField(verbose_name='Data')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Timestamp')),
                ('sensor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='data', to='inventory.sensor')),
            ],
        ),
        migrations.CreateModel(
            name='Shipment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shipment_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Shipment Time')),
                ('tracking_number', models.CharField(blank=True, max_length=255, null=True, verbose_name='Tracking Number')),
                ('dispatch', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='shipment', to='inventory.dispatch')),
                ('shipped_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Shipped By')),
            ],
        ),
        migrations.CreateModel(
            name='Supplier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='supplier name')),
                ('contact', models.CharField(max_length=255, verbose_name='supplier contact')),
                ('email', models.EmailField(max_length=254, verbose_name='supplier email')),
                ('contact_number', models.CharField(max_length=50, verbose_name='supplier contact number')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('address', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='supplier', to='inventory.address', verbose_name='address')),
            ],
        ),
        migrations.CreateModel(
            name='Receiving',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(help_text='Enter quantity of product received', verbose_name='quantity received')),
                ('receiving_date', models.DateField(default=django.utils.timezone.now, help_text='Date when product was received', verbose_name='receiving date')),
                ('notes', models.TextField(blank=True, help_text='Any additional notes about the receiving', null=True, verbose_name='additional notes')),
                ('product', models.ForeignKey(help_text='Select product being received', on_delete=django.db.models.deletion.CASCADE, related_name='receivings', to='inventory.foodproduct', verbose_name='received product')),
                ('received_by', models.ForeignKey(help_text='User who received the product', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='received_by', to=settings.AUTH_USER_MODEL, verbose_name='received by')),
                ('supplier', models.ForeignKey(help_text='Select supplier of the received product', on_delete=django.db.models.deletion.CASCADE, related_name='receivings', to='inventory.supplier', verbose_name='supplier')),
            ],
            options={
                'verbose_name': 'Receiving',
                'verbose_name_plural': 'Receivings',
                'ordering': ['-receiving_date'],
            },
        ),
        migrations.CreateModel(
            name='HistoricalReceiving',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(help_text='Enter quantity of product received', verbose_name='quantity received')),
                ('receiving_date', models.DateField(default=django.utils.timezone.now, help_text='Date when product was received', verbose_name='receiving date')),
                ('notes', models.TextField(blank=True, help_text='Any additional notes about the receiving', null=True, verbose_name='additional notes')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('product', models.ForeignKey(blank=True, db_constraint=False, help_text='Select product being received', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.foodproduct', verbose_name='received product')),
                ('received_by', models.ForeignKey(blank=True, db_constraint=False, help_text='User who received the product', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='received by')),
                ('supplier', models.ForeignKey(blank=True, db_constraint=False, help_text='Select supplier of the received product', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.supplier', verbose_name='supplier')),
            ],
            options={
                'verbose_name': 'historical Receiving',
                'verbose_name_plural': 'historical Receivings',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AddField(
            model_name='foodproduct',
            name='suppliers',
            field=models.ManyToManyField(related_name='products', to='inventory.supplier'),
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_type', models.CharField(choices=[('PAY', 'Payment'), ('REF', 'Refund'), ('ADJ', 'Adjustment')], default='PAY', max_length=3, verbose_name='Transaction Type')),
                ('status', models.CharField(choices=[('PEN', 'Pending'), ('COM', 'Completed'), ('FAI', 'Failed')], default='PEN', max_length=3, verbose_name='Status')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12, verbose_name='Amount')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transactions', to='inventory.customer', verbose_name='Related Customer')),
                ('order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transactions', to='inventory.order', verbose_name='Related Order')),
                ('supplier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transactions', to='inventory.supplier', verbose_name='Related Supplier')),
            ],
            options={
                'verbose_name': 'Transaction',
                'verbose_name_plural': 'Transactions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='VNATask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_type', models.CharField(choices=[('Putaway', 'Putaway from PND to Storage'), ('Order Picking', 'Order Picking from Storage to PND'), ('Replenishment Picking', 'Replenishment Picking from Storage to PND')], default='Putaway', help_text='Type of VNA task.', max_length=30)),
                ('quantity', models.PositiveIntegerField(verbose_name='Quantity')),
                ('vna_equipment', models.CharField(help_text='The VNA equipment used for this task.', max_length=255, verbose_name='VNA Equipment')),
                ('status', models.CharField(choices=[('Assigned', 'Assigned'), ('In Progress', 'In Progress'), ('Completed', 'Completed')], default='Assigned', max_length=20, verbose_name='Status')),
                ('start_time', models.DateTimeField(auto_now_add=True, verbose_name='Start Time')),
                ('completion_time', models.DateTimeField(blank=True, null=True, verbose_name='Completion Time')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('destination_location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vna_destination_tasks', to='inventory.location', verbose_name='Destination Location')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vna_tasks', to='inventory.foodproduct', verbose_name='Product')),
                ('source_location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vna_source_tasks', to='inventory.location', verbose_name='Source Location')),
            ],
            options={
                'verbose_name': 'VNATask',
                'verbose_name_plural': 'VNATasks',
            },
        ),
        migrations.CreateModel(
            name='HistoricalFLTTask',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('task_type', models.CharField(choices=[('Putaway', 'Putaway from Inbound to PND'), ('Order Completion', 'Full Pallets Order Completion to Outbound'), ('Replenishment', 'Replenishment to Pick Faces')], default='Putaway', help_text='Type of FLT task.', max_length=30)),
                ('quantity', models.PositiveIntegerField()),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('In Progress', 'In Progress'), ('Completed', 'Completed')], default='Pending', max_length=20)),
                ('start_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('completion_time', models.DateTimeField(blank=True, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('assigned_to', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Assigned FLT Driver')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('product', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.foodproduct')),
                ('destination_location', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.location')),
                ('source_location', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.location')),
                ('replenishment_task', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.replenishmenttask')),
                ('vna_task', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.vnatask', verbose_name='Related VNATask')),
            ],
            options={
                'verbose_name': 'historical flt task',
                'verbose_name_plural': 'historical flt tasks',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='FLTTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_type', models.CharField(choices=[('Putaway', 'Putaway from Inbound to PND'), ('Order Completion', 'Full Pallets Order Completion to Outbound'), ('Replenishment', 'Replenishment to Pick Faces')], default='Putaway', help_text='Type of FLT task.', max_length=30)),
                ('quantity', models.PositiveIntegerField()),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('In Progress', 'In Progress'), ('Completed', 'Completed')], default='Pending', max_length=20)),
                ('start_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('completion_time', models.DateTimeField(blank=True, null=True)),
                ('assigned_to', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='flt_tasks', to=settings.AUTH_USER_MODEL, verbose_name='Assigned FLT Driver')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.foodproduct')),
                ('destination_location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='flt_destination_tasks', to='inventory.location')),
                ('source_location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='flt_source_tasks', to='inventory.location')),
                ('replenishment_task', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='flt_tasks_replenishment', to='inventory.replenishmenttask')),
                ('vna_task', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='flt_tasks_vna', to='inventory.vnatask', verbose_name='Related VNATask')),
            ],
        ),
        migrations.CreateModel(
            name='Zone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='inventory.category')),
            ],
        ),
        migrations.CreateModel(
            name='HistoricalAisle',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('aisle_letter', models.CharField(help_text='Aisle identifier (letters only).', max_length=5, validators=[django.core.validators.RegexValidator('^[A-Za-z]+$', 'Only letters are allowed for aisle letters.')], verbose_name='Aisle Letter')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('zone', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.zone', verbose_name='Zone')),
            ],
            options={
                'verbose_name': 'historical Aisle',
                'verbose_name_plural': 'historical Aisles',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AddField(
            model_name='aisle',
            name='zone',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='aisles', to='inventory.zone', verbose_name='Zone'),
        ),
        migrations.CreateModel(
            name='Outbound',
            fields=[
                ('location_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='inventory.location')),
                ('address', models.CharField(max_length=255, null=True)),
                ('floor_number', models.PositiveIntegerField()),
                ('bay_number', models.PositiveIntegerField()),
                ('additional_info', models.TextField()),
                ('location_identifier', models.CharField(max_length=100)),
                ('max_capacity', models.IntegerField()),
                ('operational_restrictions', models.CharField(max_length=255)),
                ('special_handling_required', models.BooleanField(default=False)),
                ('outbound_code', models.CharField(max_length=50, unique=True, verbose_name='Outbound Code')),
                ('utilized_capacity', models.PositiveIntegerField(default=0, verbose_name='Utilized Capacity')),
                ('managing_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='managed_outbounds', to=settings.AUTH_USER_MODEL, verbose_name='Managing User')),
                ('related_outbounds', models.ManyToManyField(blank=True, to='inventory.outbound', verbose_name='Related Outbounds')),
            ],
            bases=('inventory.location',),
        ),
        migrations.CreateModel(
            name='OrderPickingTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField()),
                ('vna_equipment', models.CharField(max_length=100)),
                ('start_time', models.DateTimeField()),
                ('completion_time', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(max_length=10)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.order')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.foodproduct')),
                ('source_location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tasks_as_source', to='inventory.location', verbose_name='Source Location')),
                ('destination_location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tasks_as_destination', to='inventory.outbound', verbose_name='Destination Location')),
            ],
        ),
        migrations.CreateModel(
            name='HistoricalOrderPickingTask',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('quantity', models.IntegerField()),
                ('vna_equipment', models.CharField(max_length=100)),
                ('start_time', models.DateTimeField()),
                ('completion_time', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(max_length=10)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('product', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.foodproduct')),
                ('source_location', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.location', verbose_name='Source Location')),
                ('order', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.order')),
                ('destination_location', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.outbound', verbose_name='Destination Location')),
            ],
            options={
                'verbose_name': 'historical order picking task',
                'verbose_name_plural': 'historical order picking tasks',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='PickFace',
            fields=[
                ('location_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='inventory.location')),
                ('pick_face_code', models.CharField(max_length=50, unique=True, verbose_name='Pick Face Code')),
                ('current_stock', models.PositiveIntegerField(default=0, verbose_name='Current Stock')),
                ('low_stock_threshold', models.PositiveIntegerField(default=10, verbose_name='Low Stock Threshold')),
                ('target_stock_level', models.PositiveIntegerField(default=100, verbose_name='Target Stock Level')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pick_faces', to='inventory.category', verbose_name='Category')),
                ('parent_location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='child_pick_faces', to='inventory.pickface', verbose_name='Parent Location')),
                ('pick_faces', models.ManyToManyField(blank=True, to='inventory.pickface', verbose_name='Related Pick Faces')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pick_faces', to='inventory.foodproduct', verbose_name='Product')),
            ],
            bases=('inventory.location',),
        ),
        migrations.CreateModel(
            name='LLOPTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_type', models.CharField(choices=[('Picking', 'Picking'), ('Replenishing', 'Replenishing')], default='Picking', help_text='Type of LLOP task.', max_length=20)),
                ('quantity', models.PositiveIntegerField(verbose_name='Quantity')),
                ('unit_price', models.DecimalField(decimal_places=2, help_text='Unit price at the time of task creation', max_digits=8)),
                ('status', models.CharField(choices=[('Assigned', 'Assigned'), ('In Progress', 'In Progress'), ('Completed', 'Completed')], default='Assigned', max_length=20, verbose_name='Status')),
                ('start_time', models.DateTimeField(auto_now_add=True, verbose_name='Start Time')),
                ('completion_time', models.DateTimeField(blank=True, null=True, verbose_name='Completion Time')),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_llop_tasks', to=settings.AUTH_USER_MODEL, verbose_name='Assigned To')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='llop_tasks', to='inventory.foodproduct', verbose_name='Product')),
                ('destination_location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='llop_destination_tasks', to='inventory.outbound', verbose_name='Destination Location')),
                ('source_location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='llop_source_tasks', to='inventory.pickface', verbose_name='Source Location')),
            ],
        ),
        migrations.CreateModel(
            name='HistoricalStockLevel',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=0, help_text='Current quantity of the product at the location.', validators=[django.core.validators.MinValueValidator(0)])),
                ('batch_number', models.CharField(blank=True, help_text='Batch number for tracking specific batches of the product', max_length=100, null=True)),
                ('expiration_date', models.DateField(blank=True, help_text='Expiration date of the product batch', null=True)),
                ('last_updated', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('product', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.foodproduct', verbose_name='Product')),
                ('location', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.location', verbose_name='Warehouse Location')),
                ('pick_face', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.pickface', verbose_name='Pick Face Location')),
            ],
            options={
                'verbose_name': 'historical Stock Level',
                'verbose_name_plural': 'historical Stock Levels',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPickFace',
            fields=[
                ('location_ptr', models.ForeignKey(auto_created=True, blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, parent_link=True, related_name='+', to='inventory.location')),
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('code', models.CharField(db_index=True, help_text='Unique code for identifying the location.', max_length=50, verbose_name='Location Code')),
                ('description', models.TextField(blank=True, help_text='Description of the location.', verbose_name='Description')),
                ('side', models.CharField(choices=[('E', 'East'), ('W', 'West'), ('N', 'North'), ('S', 'South')], help_text='Side of the location', max_length=1)),
                ('location_number', models.IntegerField()),
                ('weight', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('type', models.CharField(choices=[('PND', 'PND'), ('Storage', 'Storage'), ('Pick Face', 'Pick Face'), ('Inbound Floor', 'Inbound Floor'), ('Outbound Floor', 'Outbound Floor')], default='Storage', max_length=15)),
                ('status', models.CharField(choices=[('empty', 'Empty'), ('full', 'Full'), ('vor', 'Verification Required'), ('urgent_pick', 'Urgent Picking Required'), ('urgent_replenish', 'Urgent Replenishment Required'), ('low_stock', 'Low Stock')], default='empty', max_length=20)),
                ('name', models.CharField(blank=True, max_length=255)),
                ('pick_face_code', models.CharField(db_index=True, max_length=50, verbose_name='Pick Face Code')),
                ('current_stock', models.PositiveIntegerField(default=0, verbose_name='Current Stock')),
                ('low_stock_threshold', models.PositiveIntegerField(default=10, verbose_name='Low Stock Threshold')),
                ('target_stock_level', models.PositiveIntegerField(default=100, verbose_name='Target Stock Level')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('category', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.category', verbose_name='Category')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('product', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.foodproduct', verbose_name='Product')),
                ('level', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.level')),
                ('parent_location', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.pickface', verbose_name='Parent Location')),
            ],
            options={
                'verbose_name': 'historical pick face',
                'verbose_name_plural': 'historical pick faces',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalLLOPTask',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('task_type', models.CharField(choices=[('Picking', 'Picking'), ('Replenishing', 'Replenishing')], default='Picking', help_text='Type of LLOP task.', max_length=20)),
                ('quantity', models.PositiveIntegerField(verbose_name='Quantity')),
                ('unit_price', models.DecimalField(decimal_places=2, help_text='Unit price at the time of task creation', max_digits=8)),
                ('status', models.CharField(choices=[('Assigned', 'Assigned'), ('In Progress', 'In Progress'), ('Completed', 'Completed')], default='Assigned', max_length=20, verbose_name='Status')),
                ('start_time', models.DateTimeField(blank=True, editable=False, verbose_name='Start Time')),
                ('completion_time', models.DateTimeField(blank=True, null=True, verbose_name='Completion Time')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('assigned_to', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Assigned To')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('product', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.foodproduct', verbose_name='Product')),
                ('destination_location', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.outbound', verbose_name='Destination Location')),
                ('source_location', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.pickface', verbose_name='Source Location')),
            ],
            options={
                'verbose_name': 'historical llop task',
                'verbose_name_plural': 'historical llop tasks',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='ReplenishmentPickingTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField()),
                ('vna_equipment', models.CharField(help_text='VNA equipment used for the task.', max_length=255, verbose_name='VNA Equipment')),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('In Progress', 'In Progress'), ('Completed', 'Completed')], default='Pending', max_length=20)),
                ('start_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('completion_time', models.DateTimeField(blank=True, null=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_products', to='inventory.foodproduct')),
                ('source_location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_source', to='inventory.location')),
                ('replenishment_request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='picking_tasks', to='inventory.replenishmentrequest', verbose_name='Replenishment Request')),
                ('destination_location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_destination', to='inventory.pndlocation')),
            ],
            options={
                'verbose_name': 'Replenishment Picking Task',
                'verbose_name_plural': 'Replenishment Picking Tasks',
            },
        ),
        migrations.CreateModel(
            name='PutawayTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('Assigned', 'Assigned'), ('In Progress', 'In Progress'), ('Completed', 'Completed')], default='Assigned', max_length=20, verbose_name='Status')),
                ('start_time', models.DateTimeField(auto_now_add=True, verbose_name='Start Time')),
                ('completion_time', models.DateTimeField(blank=True, null=True, verbose_name='Completion Time')),
                ('assigned_to', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='putaway_tasks', to=settings.AUTH_USER_MODEL, verbose_name='Assigned FLT Driver')),
                ('inbound', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='putaway_tasks', to='inventory.inbound')),
                ('pick_face', models.ForeignKey(help_text='Designated pick face for replenishment', null=True, on_delete=django.db.models.deletion.SET_NULL, to='inventory.pickface', verbose_name='Pick Face')),
                ('pnd_location', models.ForeignKey(help_text='Final destination in the PND location', null=True, on_delete=django.db.models.deletion.SET_NULL, to='inventory.pndlocation', verbose_name='PND Location')),
            ],
        ),
        migrations.CreateModel(
            name='HistoricalReplenishmentPickingTask',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField()),
                ('vna_equipment', models.CharField(help_text='VNA equipment used for the task.', max_length=255, verbose_name='VNA Equipment')),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('In Progress', 'In Progress'), ('Completed', 'Completed')], default='Pending', max_length=20)),
                ('start_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('completion_time', models.DateTimeField(blank=True, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('product', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.foodproduct')),
                ('source_location', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.location')),
                ('replenishment_request', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.replenishmentrequest', verbose_name='Replenishment Request')),
                ('destination_location', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.pndlocation')),
            ],
            options={
                'verbose_name': 'historical Replenishment Picking Task',
                'verbose_name_plural': 'historical Replenishment Picking Tasks',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPutawayTask',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('status', models.CharField(choices=[('Assigned', 'Assigned'), ('In Progress', 'In Progress'), ('Completed', 'Completed')], default='Assigned', max_length=20, verbose_name='Status')),
                ('start_time', models.DateTimeField(blank=True, editable=False, verbose_name='Start Time')),
                ('completion_time', models.DateTimeField(blank=True, null=True, verbose_name='Completion Time')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('assigned_to', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Assigned FLT Driver')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('inbound', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.inbound')),
                ('pick_face', models.ForeignKey(blank=True, db_constraint=False, help_text='Designated pick face for replenishment', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.pickface', verbose_name='Pick Face')),
                ('pnd_location', models.ForeignKey(blank=True, db_constraint=False, help_text='Final destination in the PND location', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.pndlocation', verbose_name='PND Location')),
            ],
            options={
                'verbose_name': 'historical putaway task',
                'verbose_name_plural': 'historical putaway tasks',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalCategory',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(help_text='format: required, max-100', max_length=100, verbose_name='category name')),
                ('slug', models.SlugField(help_text='format: required, letters, numbers, underscore, or hyphens', max_length=150, verbose_name='category safe URL')),
                ('is_active', models.BooleanField(default=True)),
                ('weight_limit', models.DecimalField(blank=True, decimal_places=2, help_text='Maximum weight limit for this category in kilograms.', max_digits=5, null=True, verbose_name='weight limit')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, db_constraint=False, help_text='format: not required', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.category', verbose_name='parent category')),
                ('pnd_location', models.ForeignKey(blank=True, db_constraint=False, help_text='Preferred PND location for this category', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.pndlocation', verbose_name='PND Location')),
            ],
            options={
                'verbose_name': 'historical product category',
                'verbose_name_plural': 'historical product categories',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AddField(
            model_name='category',
            name='pnd_location',
            field=models.ForeignKey(blank=True, help_text='Preferred PND location for this category', null=True, on_delete=django.db.models.deletion.SET_NULL, to='inventory.pndlocation', verbose_name='PND Location'),
        ),
        migrations.CreateModel(
            name='ProductLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=0, help_text='Quantity of the product at the location.')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to='inventory.location')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='locations', to='inventory.foodproduct')),
            ],
            options={
                'verbose_name': 'Product Location',
                'verbose_name_plural': 'Product Locations',
                'unique_together': {('product', 'location')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='aisle',
            unique_together={('zone', 'aisle_letter')},
        ),
        migrations.CreateModel(
            name='StockLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=0, help_text='Current quantity of the product at the location.', validators=[django.core.validators.MinValueValidator(0)])),
                ('batch_number', models.CharField(blank=True, help_text='Batch number for tracking specific batches of the product', max_length=100, null=True)),
                ('expiration_date', models.DateField(blank=True, help_text='Expiration date of the product batch', null=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stock_levels', to='inventory.location', verbose_name='Warehouse Location')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_stock_levels', to='inventory.foodproduct', verbose_name='Product')),
                ('pick_face', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pick_face_stock_levels', to='inventory.pickface', verbose_name='Pick Face Location')),
            ],
            options={
                'verbose_name': 'Stock Level',
                'verbose_name_plural': 'Stock Levels',
                'ordering': ['location', 'product', '-expiration_date'],
                'unique_together': {('location', 'product', 'batch_number')},
            },
        ),
    ]
